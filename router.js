import VkBot from 'node-vk-bot-api';
import Markup from 'node-vk-bot-api/lib/markup.js';
import Scene from 'node-vk-bot-api/lib/scene.js';
import Session from 'node-vk-bot-api/lib/session.js';
import Stage from 'node-vk-bot-api/lib/stage.js';


import dotenv from 'dotenv';
dotenv.config();

// const MAX_LENGTH_TEXT = 319;			// –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–µ
const bot = new VkBot({
	token: process.env.kupidon_token,
	confirmation: process.env.kupidon_confirmation,
});
const profbot = new VkBot({
	token: process.env.profkom_token,
	confirmation: process.env.profkom_confirmation,
});

const scene = new Scene('valentinki',
  	(ctx) => {
  	  	ctx.scene.next();
  	  	ctx.reply('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É. –ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏: https://vk.com/vladi6008');
  	},
  	async (ctx) => {

		const username = ctx.message.text.match(/(?:vk\.com\/(?:id)?|@)([a-zA-Z0-9_.]+)/)[1];

		const users = await bot.execute("users.get", {user_ids:username})
		if (!users.length){
			ctx.scene.step = 1;
			ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑');
			return
		}
		const user = users[0];
		await bot.sendMessage(ctx.message.from_id, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: —ç—Ç–æ ${user.last_name} ${user.first_name}`);

		try{
			const can_write = await profbot.execute("messages.setActivity", {user_id: user.id, type: 'typing'});
		}
		catch(err){
			ctx.scene.leave();
			ctx.reply('–£–ø—Å... –ú—ã –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω –Ω–∏ —Ä–∞–∑—É –Ω–µ –ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –ü—Ä–æ—Ñ–∫–æ–º–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ü—Å–∫–æ–≤–ì–£. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É, –µ—ë –ø–æ–ª—É—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Å—Å–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –≤ –õ–°');
			return
		}
  		ctx.session.to = user.id;

  		ctx.scene.next();
  		ctx.reply(`–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏.`);
  		// ctx.reply(`–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏. –£—á—Ç–∏—Ç–µ, —á—Ç–æ —Ç–µ–∫—Å—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å ${MAX_LENGTH_TEXT}-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–º–∞–π–ª–∏–∫–∏`);
  	},
  	(ctx) => {
		// if (ctx.message.text.length > MAX_LENGTH_TEXT){
		// 	ctx.scene.step = 2;
		// 	ctx.reply(`–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª–æ–≤ (${MAX_LENGTH_TEXT}). –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ –µ—â—ë —Ä–∞–∑.`);
		// 	return
		// }
		
  		ctx.session.text = ctx.message.text;
  		
		ctx.scene.next();
  		ctx.reply(`–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É?`, null, Markup.keyboard([
			Markup.button('–ê–Ω–æ–Ω–∏–º–Ω–æ', 'primary'),
			Markup.button('–ù–µ –∞–Ω–æ–Ω–∏–º–Ω–æ', 'secondary')
		]).oneTime());
  	},
  	async (ctx) => {
		switch(ctx.message.text){
			case '–ê–Ω–æ–Ω–∏–º–Ω–æ':
				ctx.session.anon = true;
				break;
			case '–ù–µ –∞–Ω–æ–Ω–∏–º–Ω–æ':
				ctx.session.anon = false;
				break;
			default:
				ctx.scene.step = 3;
				ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏`, null, Markup.keyboard([
					Markup.button('–ê–Ω–æ–Ω–∏–º–Ω–æ', 'primary'),
					Markup.button('–ù–µ –∞–Ω–æ–Ω–∏–º–Ω–æ', 'secondary')
				]).oneTime());
				return
				break;
		};

		const users = await bot.execute("users.get", {user_ids: ctx.session.to})
		const user = users[0];


		ctx.scene.next();
		ctx.reply(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ç—É –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @id${user.id} (${user.first_name} ${user.last_name})${ctx.session.anon ? ' –∞–Ω–æ–Ω–∏–º–Ω–æ' : ', —É–∫–∞–∑–∞–≤ –≤–∞—Å –∫–∞–∫ –∞–≤—Ç–æ—Ä–∞'}?`, null, Markup.keyboard([
			Markup.button('–î–∞', 'positive'),
			Markup.button('–ù–µ—Ç', 'negative')
		]).oneTime());
	},
	async (ctx) => {
		switch(ctx.message.text){
			case '–î–∞':
				const users = await bot.execute("users.get", {user_ids: ctx.message.from_id})
				const user = users[0];
				profbot.sendMessage(ctx.session.to,`üíå –í–∞–º –ø—Ä–∏—à–ª–∞ ${ctx.session.anon ? '–∞–Ω–æ–Ω–∏–º–Ω–∞—è' : ''} –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞${ctx.session.anon ? '' : ` –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @id${user.id} (${user.first_name} ${user.last_name})`}.\n\n${ctx.session.text}`)
				ctx.scene.leave();
				ctx.reply(`–í–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!`);
				break;
			case '–ù–µ—Ç':
				ctx.scene.leave();
				ctx.reply(`–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞`);
				break;
			default:
				ctx.scene.step = 4;
				ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏`, null, Markup.keyboard([
					Markup.button('–î–∞', 'positive'),
					Markup.button('–ù–µ—Ç', 'negative')
				]).oneTime());
				return
				break;
		};
		ctx.scene.leave();
		
	}
);
const session = new Session();
const stage = new Stage(scene);

bot.use(session.middleware());
bot.use(stage.middleware());


bot.on(async (ctx) => {
	const message = ctx.message;

	//–µ—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
	if (message['payload']){
		let payload = JSON.parse(message['payload']);

		switch(payload.action){
			case 'valent_start':
				ctx.scene.enter('valentinki')
				break;
			
		}
	}
	else{
		const markup = Markup.keyboard([
			Markup.button({
				action: {
					type: 'text',
					label: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É',
					payload: JSON.stringify({
						action: 'valent_start'
					})
				}
			})
		]);
		ctx.reply('–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', null, markup.oneTime());
	}	
});

export let kupidon_router = bot.webhookCallback;
export let profkom_router = profbot.webhookCallback;